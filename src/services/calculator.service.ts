/**
 * matrix-caclculator
 * Built a Simple calculator for Matrix Project. SINGLE CALCULATOR
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { ConflictException, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { TOKEN_BODY_CONTENT, TOKEN_EXPIRE_TIME, AUTH_COOKIE, COOKIE_EXPIRE_TIME, CREATE_TOKEN_SUCCESS_MESSAGE, DIVIDE_BY_ZERO, SIGN_HEADER_INVALID_EXPECTION, SIGN_HEADER_EMPTY, TOKEN_KEY } from '../constants';
import { Response } from 'express';
import { CalculationInfo } from '../api/structures/CalculationInfo';
import { CalculationInfoResult } from '../api/structures/CalculationInfoResult';
import { TokenBody } from '../api/structures/TokenBody';
import { MyGlobal } from '../MyGlobal';


@Injectable()
export class CalculatorService {

  constructor(private jwtService: JwtService) {
  }

  public calculation(signHeader: string, calculationInfo: CalculationInfo): CalculationInfoResult {
    const { number1, number2 } = calculationInfo;
    if (!signHeader) throw new NotFoundException(SIGN_HEADER_EMPTY)
    const operations: Record<string, () => number> = {
      "+": () => number1 + number2,
      "*": () => number1 * number2,
      "-": () => number1 - number2,
      "^": () => Math.pow(number1, number2),
      "/": () => {
        if (!number2) {
          return NaN;
        }
        return number1 / number2;
      },
      "&": () => number1 & number2,
      "|": () => number1 | number2
    }
    const func = operations[signHeader];
    if (!func) {
      throw new ConflictException(SIGN_HEADER_INVALID_EXPECTION);
    }
    const result = operations[signHeader]();
    if (isNaN(result)) throw new ConflictException(DIVIDE_BY_ZERO);
    return { result };

  }

  public async createToken(res: Response) {
    try {
      const tokenBody: TokenBody = { param: TOKEN_BODY_CONTENT };
      const token = await this.jwtService.signAsync(tokenBody, { secret: TOKEN_KEY, expiresIn: TOKEN_EXPIRE_TIME });
      res.cookie(AUTH_COOKIE, token, {
        httpOnly: true,
        secure: true,
        maxAge: COOKIE_EXPIRE_TIME
      })
      res.send(CREATE_TOKEN_SUCCESS_MESSAGE);
    } catch (error) {
      throw new InternalServerErrorException((error as Error).message);
    }

  }


}
